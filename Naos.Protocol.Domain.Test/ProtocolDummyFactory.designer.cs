// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.104.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Protocol.Domain.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;

    using global::FakeItEasy;

    using global::Naos.Protocol.Domain;

    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;

    /// <summary>
    /// The default (code generated) Dummy Factory.
    /// Derive from this class to add any overriding or custom registrations.
    /// </summary>
    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.104.0")]
#if !NaosProtocolSolution
    internal
#else
    public
#endif 
    abstract class DefaultProtocolDummyFactory : IDummyFactory
    {
        public DefaultProtocolDummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Block(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CancelBlock(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Created<Version>(
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Executed<GetAllResourceLocatorsOp>(
                                 A.Dummy<GetAllResourceLocatorsOp>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Executing<GetAllResourceLocatorsOp>(
                                 A.Dummy<GetAllResourceLocatorsOp>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Handled<Block>(
                                 A.Dummy<Block>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Handling<Block>(
                                 A.Dummy<Block>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Pruned(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PruneRequested(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new Pruning(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MemoryRecord<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<DescribedSerialization>(),
                                 A.Dummy<DateTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CreateStreamOp<Version>(
                                 A.Dummy<StreamRepresentation<Version>>(),
                                 A.Dummy<ExistingStreamEncounteredStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DiscoverOp<Version, Version>(
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAllResourceLocatorsOp());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetIdFromObjectOp<Version, Version>(
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetLatestByIdAndTypeOp<Version, Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<TypeVersionMatchStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetOp<Version>());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetProtocolByTypeOp(
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<MissingProtocolStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetResourceLocatorByIdOp<Version>(
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetReturningProtocolOp<GetOp<Version>, Version>());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetStreamFromRepresentationOp<Version>(
                                 A.Dummy<StreamRepresentation<Version>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetTagsFromObjectOp<Version>(
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetVoidProtocolOp<ThrowIfResourceUnavailableOp>());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new HandleEventOp<Block>(
                                 A.Dummy<Block>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PutOp<Version>(
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ThrowIfResourceUnavailableOp(
                                 A.Dummy<ResourceLocatorBase>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(Block),
                        typeof(CancelBlock),
                        typeof(Created<Version>),
                        typeof(Executed<GetAllResourceLocatorsOp>),
                        typeof(Executing<GetAllResourceLocatorsOp>),
                        typeof(Handled<Block>),
                        typeof(Handling<Block>),
                        typeof(Pruned),
                        typeof(PruneRequested),
                        typeof(Pruning)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (EventBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(DiscoverOp<Version, Version>),
                        typeof(GetIdFromObjectOp<Version, Version>),
                        typeof(GetLatestByIdAndTypeOp<Version, Version>),
                        typeof(GetOp<Version>)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ReturningOperationBase<Version>)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(CreateStreamOp<Version>),
                        typeof(HandleEventOp<Block>),
                        typeof(PutOp<Version>),
                        typeof(ThrowIfResourceUnavailableOp)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (VoidOperationBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NullResourceLocator());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(NullResourceLocator)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ResourceLocatorBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StreamRepresentation<Version>(
                                 A.Dummy<string>()));
        }

        /// <inheritdoc />
        public Priority Priority => new FakeItEasy.Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}